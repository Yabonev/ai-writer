name: CI Quality Gates

# Trigger on pull requests and pushes to main branch
# This ensures all code changes are validated before merge
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality Checks (No database or Prisma needed)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Generate Prisma client only for TypeScript checking
      # (TypeScript needs to resolve @prisma/client imports)
      - name: Generate Prisma client for TypeScript
        run: npx prisma generate

      # Run all code quality checks in parallel
      - name: Run code quality checks
        run: |
          npm run lint &
          npm run format:check &
          npm run typecheck &
          wait

  # Job 2: Unit Tests (Types only - no database needed)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Generate Prisma client for types (unit tests use mocked Prisma)
      - name: Generate Prisma client for types
        run: npx prisma generate

      - name: Run unit tests
        run: npm run test:run

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage-${{ github.run_id }}
          path: coverage/
          retention-days: 30

  # Job 3: E2E Tests (Requires database for real app testing)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client and setup database
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/testdb"

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/testdb"

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ github.run_id }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Job 4: Build Verification (Requires database for Next.js build validation)
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client for build
        run: npx prisma generate
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/testdb"

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/testdb"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ github.run_id }}
          path: .next/
          retention-days: 7

  # Job 5: Summary (Depends on all other jobs)
  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, e2e-tests, build]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Build: ${{ needs.build.result }}"

          # Fail if any required job failed
          if [[ "${{ needs.code-quality.result }}" != "success" || \
                "${{ needs.unit-tests.result }}" != "success" || \
                "${{ needs.e2e-tests.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Quality gates failed!"
            exit 1
          else
            echo "✅ All quality gates passed!"
          fi
